//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Inputs/HUD/HUDInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HUDInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HUDInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HUDInputActions"",
    ""maps"": [
        {
            ""name"": ""HUD"",
            ""id"": ""f7e6ac15-f852-4d1b-9075-01c3752dfe18"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d055afa1-847d-4421-b2bc-f5cf3067489b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildingElementsSelection"",
                    ""type"": ""Button"",
                    ""id"": ""4c8647b3-0d1d-4d1c-869f-c5fa1aab187a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstActionButton"",
                    ""type"": ""Button"",
                    ""id"": ""4a450cfc-13ca-4f83-994e-ad26da52ff5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondActionButton"",
                    ""type"": ""Button"",
                    ""id"": ""9f4ab144-fb25-41a9-b41c-0042d8dc40ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad4ec14c-aa27-4da0-bb22-f3ac1e79afa4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59e6a6c-45ef-44fa-a6f8-5bb885d3d3b9"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingElementsSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1db32515-ebdc-4532-a560-3c4b5bece566"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65d265b6-20d2-44ed-9b90-4c5d2d9083c4"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HUD
        m_HUD = asset.FindActionMap("HUD", throwIfNotFound: true);
        m_HUD_Pause = m_HUD.FindAction("Pause", throwIfNotFound: true);
        m_HUD_BuildingElementsSelection = m_HUD.FindAction("BuildingElementsSelection", throwIfNotFound: true);
        m_HUD_FirstActionButton = m_HUD.FindAction("FirstActionButton", throwIfNotFound: true);
        m_HUD_SecondActionButton = m_HUD.FindAction("SecondActionButton", throwIfNotFound: true);
    }

    ~@HUDInputActions()
    {
        UnityEngine.Debug.Assert(!m_HUD.enabled, "This will cause a leak and performance issues, HUDInputActions.HUD.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HUD
    private readonly InputActionMap m_HUD;
    private List<IHUDActions> m_HUDActionsCallbackInterfaces = new List<IHUDActions>();
    private readonly InputAction m_HUD_Pause;
    private readonly InputAction m_HUD_BuildingElementsSelection;
    private readonly InputAction m_HUD_FirstActionButton;
    private readonly InputAction m_HUD_SecondActionButton;
    public struct HUDActions
    {
        private @HUDInputActions m_Wrapper;
        public HUDActions(@HUDInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_HUD_Pause;
        public InputAction @BuildingElementsSelection => m_Wrapper.m_HUD_BuildingElementsSelection;
        public InputAction @FirstActionButton => m_Wrapper.m_HUD_FirstActionButton;
        public InputAction @SecondActionButton => m_Wrapper.m_HUD_SecondActionButton;
        public InputActionMap Get() { return m_Wrapper.m_HUD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HUDActions set) { return set.Get(); }
        public void AddCallbacks(IHUDActions instance)
        {
            if (instance == null || m_Wrapper.m_HUDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HUDActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @BuildingElementsSelection.started += instance.OnBuildingElementsSelection;
            @BuildingElementsSelection.performed += instance.OnBuildingElementsSelection;
            @BuildingElementsSelection.canceled += instance.OnBuildingElementsSelection;
            @FirstActionButton.started += instance.OnFirstActionButton;
            @FirstActionButton.performed += instance.OnFirstActionButton;
            @FirstActionButton.canceled += instance.OnFirstActionButton;
            @SecondActionButton.started += instance.OnSecondActionButton;
            @SecondActionButton.performed += instance.OnSecondActionButton;
            @SecondActionButton.canceled += instance.OnSecondActionButton;
        }

        private void UnregisterCallbacks(IHUDActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @BuildingElementsSelection.started -= instance.OnBuildingElementsSelection;
            @BuildingElementsSelection.performed -= instance.OnBuildingElementsSelection;
            @BuildingElementsSelection.canceled -= instance.OnBuildingElementsSelection;
            @FirstActionButton.started -= instance.OnFirstActionButton;
            @FirstActionButton.performed -= instance.OnFirstActionButton;
            @FirstActionButton.canceled -= instance.OnFirstActionButton;
            @SecondActionButton.started -= instance.OnSecondActionButton;
            @SecondActionButton.performed -= instance.OnSecondActionButton;
            @SecondActionButton.canceled -= instance.OnSecondActionButton;
        }

        public void RemoveCallbacks(IHUDActions instance)
        {
            if (m_Wrapper.m_HUDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHUDActions instance)
        {
            foreach (var item in m_Wrapper.m_HUDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HUDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HUDActions @HUD => new HUDActions(this);
    public interface IHUDActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnBuildingElementsSelection(InputAction.CallbackContext context);
        void OnFirstActionButton(InputAction.CallbackContext context);
        void OnSecondActionButton(InputAction.CallbackContext context);
    }
}
